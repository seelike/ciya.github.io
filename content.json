{"pages":[],"posts":[{"title":"学习笔记二《Selenium IDE》","text":"Selenium IDE： Selenium IDE仅作为Mozilla Firefox和Chrome插件提供，可实现网页操作步骤的录制和回放， 执行简单测试逻辑的自动化测试， 可以将录制的测试脚本导出为C#，Java，Ruby或Python等编程语言 主界面如图： 常用工具栏： 从左到右依次是： 执行所有case按钮， 执行当前case按钮，单步执行按钮，测试用例执行速度控制栏， 断点， 暂停录制，录制脚本按钮 Selenium IDE脚本介绍： Commond 命令也成为selenese; Selenese 最多有两个参数（target 和 value ),也可以有一个（target） 或者没有参数； Selenese 命令类型： Actions 类型： 如click 命令表示单击页面元素； type命令会在页面文本框输入文字，输入的内容显示在文本框中 Accessors 存储器类型： 如storeTitle存储型命令，将页面的title信息读取出来，并存储到变量中，与页面元素本身没有交互 Assertions断言类型： 如 Assert， Verify，waitFor 部分验证点操作： 选中一个验证点， 编辑脚本中可以更改验证点： “右键” 插入一个新的command， 查看编辑脚本区，列表展示合适的验证点 以上录制脚本中： case全部通过， 左下角显示绿色进度条说明case通过； 如果没有通过，则显示红色提示，说明失败case; 已经跑完通过的case在脚本显示区为绿色 未执行完成的case为黄色 尚未执行的case为灰色 执行失败的case为红色 tips： Selenium IDE：学习此插件需要熟悉HTML, JavaScript, DOM Selenium IDE 仅适用于执行简单逻辑的自动化测试脚本，不适用大项目","link":"/2019/05/11/selenium webdriver3.0 学习笔记二/"},{"title":"学习笔记三《初识WebDriver》","text":"WebDriver原理： Selenium Webdriver是通过各种浏览器的驱动（web driver）来驱动浏览器，原理示意图如下： ​ 在python中安装WebDriver： 完成python，pip工具的安装后，在cmd下输入“pip install selenium”， 完成安装后输入”python” 进入python 交互模式， 输入“import selenium” 没有报错即成功安装selenium。 安装浏览器驱动： Firefox 浏览器的驱动： https://github.com/mozilla/geckodriver/releases Google浏览器驱动： http://npm.taobao.org/mirrors/chromedriver/ 选择适合自己操作系统的版本进行下载。 第一个webDriver 脚本： 12345678910111213141516171819202122232425262728293031#-*-coding:UTF-8-*-fromseleniumimportwebdriverfromselenium.common.exceptionsimportNoSuchElementExceptionimporttimeimportselenium.webdriver.support.uiasui#通过executable_path参数指明Firefox驱动文件所在路径#路径查询：windows系统或者采用C:/Users/34954/Downloads/geckodriverdriver=webdriver.Firefox(executable_path=&quot;C:\\\\Users\\\\34954\\\\Downloads\\\\geckodriver&quot;)#若定位元素时间较长，可用10s内每隔500ms扫描1次页面变化，当出现指定元素后结束wait=ui.WebDriverWait(driver,10)#打开百度首页driver.get(&quot;https://baidu.com&quot;)try: wait.until(lambdadriver:driver.find_element_by_id(&quot;kw&quot;))#清空搜索输入框默认内容 driver.find_element_by_id(&quot;kw&quot;).clear()#在搜索输入框内输入“自动化测试” driver.find_element_by_id(&quot;kw&quot;).send_keys(&quot;自动化测试&quot;)#单击“搜索”按钮 driver.find_element_by_id(&quot;su&quot;).click()#若定位不到元素，抛出异常exceptNoSuchElementExceptionasmsg: print(&quot;查找元素异常&quot;)#等待3秒time.sleep(3)#退出浏览器driver.quit() 4.1 问题及建议 问题 1. 报错提示NoSuchElementException: Unable to locate element 解决办法： 去网页相应的元素下查找相关的element_id， 如url为sogou.com时对应的查询id为“query”，对应的搜索button id为“stb”","link":"/2019/12/15/selenium webdriver3.0 学习笔记三/"},{"title":"学习笔记一《selenium 基本原理》","text":"Selenium 的简介： Selenium1.0 ： Selenium core = Selenium Remote Control (RC )+ Selenium IDE (集成开发环境） Selenium 2.0 : = Selenium1 + WebDriver Webdriver 用来绕过JavaScript环境的沙盒限制， 可以直接让测试工具调用浏览器和操作系统本身提供的内置方法。 Selenium 官网地址： www.seleniumhq.org Selenium RC 的实现原理 selenium1的自动化执行步骤： 测试人员基于Selenium支持的编程语言编写好测试脚本程序。 测试人员执行测试程序。 测试脚本程序发送访问网站的HTTP请求给Remote Control Server（RC）。 RC 收到请求后，访问被测试网站并获取网页数据内容，并在网页中插入Selenium Core的JavaScript代码库，然后返回给测试人员执行测试的浏览器。 测试脚本在浏览器内部再调用selenium Core来执行测试代码逻辑，记录测试结果，完成测试 理解以上步骤： 理解“ 同源策略” —-浏览器的JavaScript 安全机制 ​ 相同的协议，端口，域名 Selenium 1工具的核心部分是基于JavaScript代码库来实现的，这个库默认地和被测网站分离，它的URL和被测网站的域名是不一致的，为了绕过浏览器安全机制，Selenium 1.0 作者使用代理方式解决问题 selenium1代理模式的实现机制： 执行测试脚本，脚本向Selenium Server发起请求，要求和Selenium Server建立链接。 Selenium Server的Launcher启动浏览器，向浏览器中插入Selenium Core的JavaScript代码库，并把浏览器的代理设置为Selenium Server的Http Proxy，确保后续Core的脚本域被访问的网站的脚本同源。 测试脚本向seleniumServer发送Http请求，Selenium Server对请求进行解析，然后通过Http Proxy发送JS命令通知Selenium Core发送JS命令通知Seleniim Core执行操作浏览器的请求。 Selenium Core收到指令后，执行测试脚本里指定的网页操作命令。 浏览器收到新的请求信息，于是发送Http请求给Selenium给Selenium Core里的Http Proxy，请求新的Web页面。（因为第二步中，selenium Server在启动浏览器的时候，已经把浏览器的代理地址设定为Selenium Server的Http Proxy） Selenium Server接收到请求后，自行重组http请求，向应用服务器发送请求并获取返回的web页面。 Selenium Server的Http Proxy把接收到的Web页面返回给浏览器。 WebDriver 的实现原理 与 selenium 1注入不同，直接利用浏览器的内部接口来操作浏览器； 优点： 基于浏览器内部接口实现自动化测试，接近用户使用的真实情况； selenium必须操作浏览器，webdriver 可以使用HTMLunit进行测试，不打开浏览器进行快速测试 提供了简介的面向对象API ， 提高测试脚本的编写效率 使用过程中无须单独启动selenium server","link":"/2019/12/15/selenium WebDriver 3.0 学习笔记一/"}],"tags":[{"name":"笔记","slug":"笔记","link":"/tags/笔记/"},{"name":"笔记 selenuim","slug":"笔记-selenuim","link":"/tags/笔记-selenuim/"}],"categories":[{"name":"selenium","slug":"selenium","link":"/categories/selenium/"}]}
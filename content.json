{"pages":[],"posts":[{"title":"","text":"","link":"/2019/10/13/Untitled/"},{"title":"ciya","text":"hello ciya","link":"/2019/05/11/firstpage/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/05/11/hello-world/"},{"title":"second","text":"hello ciyathis is second page bighahhahha","link":"/2019/05/12/secondnpage/"},{"title":"ciya","text":"hello ciya �˰�hiahia","link":"/2019/10/13/secondpage/"},{"title":"《selenium WebDriver 3.0》学习笔记","text":"Selenium 的简介： Selenium1.0 ： Selenium core = Selenium Remote Control (RC )+ Selenium IDE (集成开发环境） Selenium 2.0 : = Selenium1 + WebDriver Webdriver 用来绕过JavaScript环境的沙盒限制， 可以直接让测试工具调用浏览器和操作系统本身提供的内置方法。 Selenium 官网地址： www.seleniumhq.org Selenium RC 的实现原理 selenium1的自动化执行步骤： 测试人员基于Selenium支持的编程语言编写好测试脚本程序。 测试人员执行测试程序。 测试脚本程序发送访问网站的HTTP请求给Remote Control Server（RC）。 RC 收到请求后，访问被测试网站并获取网页数据内容，并在网页中插入Selenium Core的JavaScript代码库，然后返回给测试人员执行测试的浏览器。 测试脚本在浏览器内部再调用selenium Core来执行测试代码逻辑，记录测试结果，完成测试 理解以上步骤： 理解“ 同源策略” —-浏览器的JavaScript 安全机制 相同的协议，端口，域名 \\2. Selenium 1工具的核心部分是基于JavaScript代码库来实现的，这个库默认地和被测网站分离，它的URL和被测网站的域名是不一致的，为了绕过浏览器安全机制，Selenium 1.0 作者使用代理方式解决问题 selenium1代理模式的实现机制： 执行测试脚本，脚本向Selenium Server发起请求，要求和Selenium Server建立链接。 Selenium Server的Launcher启动浏览器，向浏览器中插入Selenium Core的JavaScript代码库，并把浏览器的代理设置为Selenium Server的Http Proxy，确保后续Core的脚本域被访问的网站的脚本同源。 测试脚本向seleniumServer发送Http请求，Selenium Server对请求进行解析，然后通过Http Proxy发送JS命令通知Selenium Core发送JS命令通知Seleniim Core执行操作浏览器的请求。 Selenium Core收到指令后，执行测试脚本里指定的网页操作命令。 浏览器收到新的请求信息，于是发送Http请求给Selenium给Selenium Core里的Http Proxy，请求新的Web页面。（因为第二步中，selenium Server在启动浏览器的时候，已经把浏览器的代理地址设定为Selenium Server的Http Proxy） Selenium Server接收到请求后，自行重组http请求，向应用服务器发送请求并获取返回的web页面。 Selenium Server的Http Proxy把接收到的Web页面返回给浏览器。 WebDriver 的实现原理 与 selenium 1注入不同，直接利用浏览器的内部接口来操作浏览器； 优点： 基于浏览器内部接口实现自动化测试，接近用户使用的真实情况； selenium必须操作浏览器，webdriver 可以使用HTMLunit进行测试，不打开浏览器进行快速测试 提供了简介的面向对象API ， 提高测试脚本的编写效率 使用过程中无须单独启动selenium server","link":"/2019/12/15/selenium 基本原理/"}],"tags":[{"name":"笔记","slug":"笔记","link":"/tags/笔记/"}],"categories":[{"name":"selenium","slug":"selenium","link":"/categories/selenium/"}]}